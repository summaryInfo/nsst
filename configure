#!/bin/sh

use_boxdrawing=1
use_precompose=1
debug_lines=0
use_clang=0
use_uri=1
prefix=/usr/local
name=nsst
use_x11=0
use_wayland=0
use_x11shm=unset
use_x11xrender=1
use_waylandshm=unset
cflags='-O2 -flto=auto'
vars=
version=20501

# Test some features by trying compiling snippets
linkrt=' -lrt '
testcc='cc'

emptytest="int main(){}\n"
shmtest="#define _POSIX_C_SOURCE 200809L\n#include <sys/mman.h>\nint main(){shm_open(0,0,0);}\n"
ppolltest="#define _GNU_SOURCE\n#include <poll.h>\nint main(){ppoll(0,0,0,0);}\n"
memfdtest="#define _GNU_SOURCE\n#include <sys/mman.h>\nint main(){memfd_create(0,0);}\n"
nanosleeptest="#define _POSIX_C_SOURCE 200809L\n#include <time.h>\nint main(){clock_nanosleep(0,0,0,0);}\n"

warns="-Walloca -Wno-aggressive-loop-optimizations"
warns="$warns -Wdisabled-optimization -Wduplicated-branches -Wduplicated-cond"
warns="$warns -Wignored-attributes  -Wincompatible-pointer-types"
warns="$warns -Winit-self -Wwrite-strings -Wvla -Wundef"
warns="$warns -Wmissing-attributes -Wmissing-format-attribute -Wmissing-noreturn"
warns="$warns -Wswitch-bool -Wpacked -Wshadow -Wformat-security"
warns="$warns -Wswitch-unreachable -Wlogical-op -Wstringop-truncation"
warns="$warns -Wbad-function-cast -Wnested-externs -Wstrict-prototypes"
outwarns=''

dotest() {
    echo -n "Testing for '$2'... " >&2
    if printf "$1" | $testcc $linkrt -x c - >/dev/null 2>&1; then
        rm -f a.out
        printf "\033[1;32mYES\033[m.\n" >&2
        return 0
    else
        printf "\033[1;31mNO\033[m.\n" >&2
        return 1
    fi
}

dotestwarn() {
    echo -n "Testing for '$1' warning... " >&2
    if printf "$emptytest" | $testcc -Werror $1 -x c - >/dev/null 2>&1; then
        rm -f a.out
        printf "\033[1;32mYES\033[m.\n" >&2
        return 0
    else
        printf "\033[1;31mNO\033[m.\n" >&2
        return 1
    fi
}

help() {
cat <<END
Usage: configure [options]
    --name=NAME             Binary name [$name]
    --prefix=DIR            Installation prefix [$prefix]
    --mandir=DIR            Man install directory [$prefix/share/man]
    --bindir=DIR            Binary install directory [$prefix/bin]
    --enable-ppoll          Enable ppoll() in main loop for better timing [set if available]
    --disable-ppoll         Disable ppoll() in main loop, use poll instead
    --enable-memfd          Enable memfd_create() for shared memory buffer creation [set if available]
    --disable-memfd         Disable memfd_create() for shared memory buffer creation
    --disable-ppoll         Disable ppoll() in main loop, use poll instead
    --enable-nanosleep      Enable POSIX clock_nanosleep() [set if available]
    --disable-nanosleep     Disable POSIX clock_nanosleep() use nanosleep() instead
    --enable-boxdrawing     Enable built-in box drawing characters [set]
    --disable-boxdrawing    Disable built-in box drawing characters
    --enable-uri            Enable URI handling features [set]
    --disable-uri           Disable URI handling features
    --enable-precompose     Enable unicode combining characters precomposition [set]
    --disable-precompose    Disable unicode combining characters precomposition
    --enable-posix-shm      Enable posix shared memory functions usage
    --disable-posix-shm     Disable posix shared memory functions usa
    --enable-x11-shm        Enable X11 MITSHM rendering backend
    --disable-x11-shm       Disable X11 MITSHM rendering backend
    --enable-x11-xrender    Enable X11 XRender rendering backend [set if available]
    --disable-x11-xrender   Disable X11 XRender rendering backend
    --enable-x11            Enable all X11 rendering backends (shm, xrender)
    --disable-x11           Disable all X11 rendering backends (shm, xrender)
    --enable-wayland-shm    Enable Wayland shm rendering backend
    --disable-wayland-shm   Disable Wayland shm rendering backend
    --enable-wayland        Enable all Wayland rendering backends (shm)
    --disable-wayland       Disable all Wayland rendering backends (shm)
    --use-clang             Configure to compile with clang/lld
    --debug-lines           Enable heavy interal data structures checks
END
}

oldifs="$IFS"
IFS=''
nl='\
'

for i; do
    case "$i" in
    --enable-ppoll)
        use_ppoll=1 ;;
    --disable-ppoll)
        use_ppoll=0 ;;
    --enable-memfd)
        use_memfd=1 ;;
    --disable-memfd)
        use_memfd=0 ;;
    --enable-boxdrawing)
        use_boxdrawing=1 ;;
    --disable-boxdrawing)
        use_boxdrawing=0 ;;
    --enable-uri)
        use_uri=1 ;;
    --disable-uri)
        use_uri=0 ;;
    --enable-precompose)
        use_precompose=1 ;;
    --disable-precompose)
        use_precompose=0 ;;
    --enable-x11-shm)
        use_x11shm=1 ;;
    --disable-x11-shm)
        use_x11shm=0 ;;
    --enable-x11-xrender)
        use_x11xrender=1 ;;
    --disable-x11-xrender)
        use_x11xrender=0 ;;
    --enable-wayland)
        use_waylandshm=1 ;;
    --disable-wayland)
        use_waylandshm=0 ;;
    --enable-x11)
        use_x11xrender=1
        use_x11shm=1 ;;
    --disable-x11)
        use_x11xrender=0
        use_x11shm=0 ;;
    --enable-wayland-shm)
        use_waylandshm=1 ;;
    --disable-wayland-shm)
        use_waylandshm=0 ;;
    --enable-nanosleep)
        use_nanosleep=1 ;;
    --disable-nanosleep)
        use_nanosleep=0 ;;
    --enable-posix-shm)
        use_posix_shm=1 ;;
    --disable-posix-shm)
        use_posix_shm=0 ;;
    --use-clang)
        use_clang=1 ;;
    --debug-lines)
        debug_lines=1 ;;
    --name=*)
        name="${i#--name=}" ;;
    --bindir=*)
        bindir="${i#--bindir=}" ;;
    --mandir=*)
        mandir="${i#--mandir=}" ;;
    --mandir=*)
        sharedir="${i#--sharedir=}" ;;
    --prefix=*)
        prefix="${i#--prefix=}" ;;
    [A-Za-z_]*=*)
        if [ xCFLAGS = x"${i%%=*}" ]; then
            cflags="${i#*=}"
        else
            vars="$vars$nl$i"
        fi ;;
    *)
        help
        exit 1 ;;
    esac
done

IFS="$oldifs"

if [ "$use_clang" = 1 ]; then
    vars="${vars}${nl}LDFLAGS += -fuse-ld=lld${nl}CC=clang"
    testcc=clang
fi

if ! dotest "$emptytest" "librt presence"; then
    linkrt=''
fi

# Test for presence of warning options
for w in $warns; do
    if dotestwarn $w; then
        outwarns="$outwarns $w"
    fi
done

# Test if system supports POSIX shared memory
if [ -z $use_posix_shm ]; then
    dotest "$shmtest" "POSIX Shared memory" && use_posix_shm=1 || use_posix_shm=0
fi
# Test if system supports ppoll()
if [ -z $use_ppoll ]; then
    dotest "$ppolltest" "ppoll() function" && use_ppoll=1 || use_ppoll=0
fi
# Test if system supports memfd()
if [ -z $use_memfd ]; then
    dotest "$memfdtest" "memfd() function" && use_memfd=1 || use_memfd=0
fi
# Test if system supports POSIX clock_nanosleep()
if [ -z $use_nanosleep ]; then
    dotest "$nanosleeptest" "clock_nanosleep() function" && use_nanosleep=1 || use_nanosleep=0
fi

vars="${vars}${nl}CFLAGS=$cflags"


[ x = x"$bindir" ] && bindir=${prefix}/bin
[ x = x"$mandir" ] && mandir=${prefix}/share/man
[ x = x"$sharedir" ] && sharedir=${prefix}/share

deps="fontconfig freetype2 xkbcommon"
objs="nsst.o util.o font.o term.o screen.o tty.o line.o config.o"
objs="$objs mouse.o input.o nrcs.o daemon.o poller.o window.o multipool.o"

if [ "$use_x11shm" = unset ]; then
    if [ "$use_x11xrender" != 1 ]; then
        use_x11shm=1
    else
        use_x11shm=0
    fi
fi

if [ "$use_waylandshm" = unset ]; then
    if [ "$use_x11shm" != 1 ] && [ "$use_x11xrender" != 1 ]; then
        use_waylandshm=1
    else
        use_waylandshm=0
    fi
fi

if [ "$use_x11shm" != 1 ] && [ "$use_x11xrender" != 1 ] && [ "$use_waylandshm" != 1 ]; then
    echo "\033[1;31mEnable at least one backend (wayland-shm, x11-shm or x11-xrender)\033[m"
    help
    exit 1
fi

if [ "$use_x11shm" = 1 ] || [ "$use_x11xrender" = 1 ]; then
    objs="$objs window-x11.o"
    deps="$deps xcb xcb-xkb xkbcommon-x11"
    use_x11=1
fi

if [ "$use_x11shm" = 1 ] || [ "$use_waylandshm" = 1 ]; then
    objs="$objs render-shm.o image.o"
fi

if [ "$use_x11shm" = 1 ]; then
    objs="$objs render-shm-x11.o"
    deps="$deps xcb-shm"
fi

if [ "$use_x11xrender" = 1 ]; then
    objs="$objs render-xrender-x11.o"
    deps="$deps xcb-render"
fi

if [ "$use_waylandshm" = 1 ]; then
    objs="$objs render-shm-wayland.o window-wayland.o"
    deps="$deps wayland-client wayland-cursor"
    vars="${vars}${nl}"'WAYLANDPROTOCOLSDIR != $(PKGCONFIG) wayland-protocols --variable=pkgdatadir'
    vars="${vars}${nl}"'WAYLANDSCANNER != $(PKGCONFIG) --variable=wayland_scanner wayland-scanner'

    vars="${vars}${nl}"'XDGSHELLPROTOCOL = $(WAYLANDPROTOCOLSDIR)/stable/xdg-shell/xdg-shell.xml'
    objs="$objs xdg-shell-protocol.o"

    vars="${vars}${nl}"'PRIMARYSELECTIONPROTOCOL = $(WAYLANDPROTOCOLSDIR)/unstable/primary-selection/primary-selection-unstable-v1.xml'
    objs="$objs primary-selection-protocol.o"

    vars="${vars}${nl}"'XDGDECORATIONPROTOCOL = $(WAYLANDPROTOCOLSDIR)/unstable/xdg-decoration/xdg-decoration-unstable-v1.xml'
    objs="$objs xdg-decoration-protocol.o"

    vars="${vars}${nl}"'XDGOUTPUTPROTOCOL = $(WAYLANDPROTOCOLSDIR)/unstable/xdg-output/xdg-output-unstable-v1.xml'
    objs="$objs xdg-output-protocol.o"

    use_wayland=1
fi

[ x"$use_boxdrawing" = x1 ] && objs="$objs boxdraw.o"
[ x"$use_uri" = x1 ] && objs="$objs uri.o"

sed < "./feature.h.in" > "./feature.h" \
    -e "s:@USE_PPOLL@:$use_ppoll:g" \
    -e "s:@USE_CLOCK_NANOSLEEP@:$use_nanosleep:g" \
    -e "s:@USE_BOXDRAWING@:$use_boxdrawing:g" \
    -e "s:@USE_X11SHM@:$use_x11shm:g" \
    -e "s:@USE_X11@:$use_x11:g" \
    -e "s:@USE_XRENDER@:$use_x11xrender:g" \
    -e "s:@USE_PRECOMPOSE@:$use_precompose:g" \
    -e "s:@USE_WAYLAND@:$use_wayland:g" \
    -e "s:@USE_WAYLANDSHM@:$use_waylandshm:g" \
    -e "s:@USE_POSIX_SHM@:$use_posix_shm:g" \
    -e "s:@USE_MEMFD@:$use_memfd:g" \
    -e "s:@USE_URI@:$use_uri:g" \
    -e "s:@DEBUG_LINES@:$debug_lines:g" \
    -e "s:@VERSION@:$version:g"

sed < "./Makefile.in" > "./Makefile" \
    -e "s:@NAME@:$name:" \
    -e "s:@PREFIX@:$prefix:" \
    -e "s:@BINDIR@:$bindir:" \
    -e "s:@MANDIR@:$mandir:" \
    -e "s:@SHAREDIR@:$sharedir:" \
    -e "s:@DEPS@:$deps:" \
    -e "s:@EXTRAWARNINGS@:$outwarns:" \
    -e "s:@LIBRT@:$linkrt:" \
    -e "s:@OBJECTS@:$objs:" \
    -e "s:@VARS@:$vars:"

cat <<END

Configure results:
    name..................... $name
    prefix................... $prefix
    bindir................... $bindir
    mandir................... $mandir
    sharedir................. $sharedir
    X11 MIT-SHM backend...... $use_x11shm
    X11 XRender backend...... $use_x11xrender
    Wayland shm backend...... $use_waylandshm
    boxdrawing............... $use_boxdrawing
    URI...................... $use_uri
    precompose............... $use_precompose
    ppoll().................. $use_ppoll
    memfd_create()........... $use_memfd
    clock_nanosleep()........ $use_nanosleep
    POSIX shm................ $use_posix_shm
    force clang+lld.......... $use_clang
    debug lines.............. $debug_lines

    Do "make && make install" to compile and install nsst
END
